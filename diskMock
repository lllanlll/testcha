<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta http-equiv="X-UA-Compatible" content="ie=edge">
	<title>磁盘寻道</title>
	<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
	<link rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-chalk/index.css">
	<script src="https://unpkg.com/element-ui/lib/index.js"></script>
	<style>
		.range-area {
			text-align: center;
		}

		.contain {
			width: 498px;
			border: 1px solid #dee1e6;
			padding: 10px;
			padding-top: 0;
		}

		.header {
			text-align: center;
		}

		.footer {
			text-align: center;
		}

		.item-value {
			text-align: center;
			display: inline-block;
			width: 48%;
			border: 1px solid #dee1e6;
		}

		.main-area-item div {
			display: inline-block;
			text-align: center;
			width: 48%;
			margin-top: 5px;
			border: 1px solid #dee1e6;
			height: 30px;
			line-height: 30px;
		}
	</style>
</head>

<body>
	<div id="app">
		<div class="main">
			<div class="range-area">
				<el-form>
					<el-form-item label="寻道范围">
						<el-input v-model="range"></el-input>
					</el-form-item>
					<el-form-item label="当前磁道号">
						<el-input v-model="anchor"></el-input>
					</el-form-item>
					<el-form-item label="磁道数">
						<el-input v-model="num"></el-input>
					</el-form-item>
				</el-form>
				<el-button type="success" round @click="generateQueue">生成随机寻道范围</el-button>
				<p>
					<span>需寻道队列：</span>
					<span>{{ allQueue }}</span>
				</p>
				<p>
					<span>当前磁头位置：</span>
					<span>{{ anchor }}</span>
				</p>
			</div>
			<div class="show-area">
				<el-tabs type="border-card" v-model="activeName" @tab-click="changeType">
					<el-tab-pane label="预制" name="head">
					</el-tab-pane>
					<el-tab-pane label="FCFS" name="first">
						<h3>FCFS先来先服务算法</h3>
						<div class="contain">
							<p class="header">
								从{{ anchor }}号磁道开始访问
							</p>
							<div class="heaer-top">
								<div class="item-value">被访问的下一个磁道号</div>
								<div class="item-value">移动距离(磁道数)</div>
							</div>
							<div class="main-area">
								<div class="main-area-item" v-for="(item, index) in visitQueue" :key="index">
									<div class="number">{{ item }}</div>
									<div class="distance">{{ distanceQueue[index] }}</div>
								</div>
							</div>
							<p class="footer">
								平均寻道长度：{{ averageDistance }}
							</p>
						</div>
					</el-tab-pane>
					<el-tab-pane label="SSTF" name="second">
						<h3>SSTF最短寻道时间优先</h3>
						<div class="contain">
							<p class="header">
								从{{ anchor }}号磁道开始访问
							</p>
							<div class="heaer-top">
								<div class="item-value">被访问的下一个磁道号</div>
								<div class="item-value">移动距离(磁道数)</div>
							</div>
							<div class="main-area">
								<div class="main-area-item" v-for="(item, index) in visitQueue" :key="index">
									<div class="number">{{ item }}</div>
									<div class="distance">{{ distanceQueue[index] }}</div>
								</div>
							</div>
							<p class="footer">
								平均寻道长度：{{ averageDistance }}
							</p>
						</div>
					</el-tab-pane>
					<el-tab-pane label="SCAN" name="thirst">
						<h3>SCAN扫描算法（电梯调度算法）</h3>
						<div class="contain">
							<p class="header">
								从{{ anchor }}号磁道开始访问
							</p>
							<div class="heaer-top">
								<div class="item-value">被访问的下一个磁道号</div>
								<div class="item-value">移动距离(磁道数)</div>
							</div>
							<div class="main-area">
								<div class="main-area-item" v-for="(item, index) in visitQueue" :key="index">
									<div class="number">{{ item }}</div>
									<div class="distance">{{ distanceQueue[index] }}</div>
								</div>
							</div>
							<p class="footer">
								平均寻道长度：{{ averageDistance }}
							</p>
						</div>
					</el-tab-pane>
					<el-tab-pane label="CSCAN" name="fourth">
						<h3>CSCAN循环扫描算法</h3>
						<div class="contain">
							<p class="header">
								从{{ anchor }}号磁道开始访问
							</p>
							<div class="heaer-top">
								<div class="item-value">被访问的下一个磁道号</div>
								<div class="item-value">移动距离(磁道数)</div>
							</div>
							<div class="main-area">
								<div class="main-area-item" v-for="(item, index) in visitQueue" :key="index">
									<div class="number">{{ item }}</div>
									<div class="distance">{{ distanceQueue[index] }}</div>
								</div>
							</div>
							<p class="footer">
								平均寻道长度：{{ averageDistance }}
							</p>
						</div>
					</el-tab-pane>
					<el-tab-pane label="NStepSCAN" name="fifth">
						<h3>NStepSCAN扫描算法</h3>
						<div class="contain">
							<p class="header">
								从{{ current }}号磁道开始访问
							</p>
							<div class="heaer-top">
								<div class="item-value">被访问的下一个磁道号</div>
								<div class="item-value">移动距离(磁道数)</div>
							</div>
						</div>
					</el-tab-pane>
				</el-tabs>
			</div>
		</div>
	</div>
</body>
<script>
	//生成整随机数
	function randomNum(minNum, maxNum) {
		switch (arguments.length) {
			case 1:
				return parseInt(Math.random() * minNum + 1, 10);
				break;
			case 2:
				return parseInt(Math.random() * (maxNum - minNum + 1) + minNum, 10);
				break;
			default:
				return 0;
				break;
		}
	}

	//快速排序
	const quickSort = (arr) => {
		let left = [],
			right = [],
			len = arr.length,
			pivot = arr[0]
		if (len < 2) {
			return arr
		}
		for (let i = 1; i < len; i++) {
			if (arr[i] <= pivot) {
				left.push(arr[i])
			} else {
				right.push(arr[i])
			}
		}
		return quickSort(left).concat([pivot], quickSort(right))
	}

	// 定义一个深拷贝函数 接收目标target参数
	function deepClone(target) {
		let result;
		if (typeof target === 'object') {
			if (Array.isArray(target)) {
				result = [];
				for (let i in target) {
					result.push(deepClone(target[i]))
				}
			} else if (target === null) {
				result = null;
			} else if (target.constructor === RegExp) {
				result = target;
			} else {
				result = {};
				for (let i in target) {
					result[i] = deepClone(target[i]);
				}
			}
		} else {
			result = target;
		}
		return result;
	}

	const compare = (a, b) => {
		return b - a
	}

	var vm = new Vue({
		el: '#app',
		data: {
			range: 0,
			num: 0,
			current: 0,
			allQueue: [],
			visitQueue: [],
			distanceQueue: [],
			moveDistance: 0,
			activeName: 'head',
			anchor: 0
		},
		computed: {
			averageDistance() {
				return this.moveDistance / this.num
			}
		},
		methods: {
			generateQueue() {
				this.allQueue = []
				this.current = this.anchor
				let item
				for (let i = 0; i < this.num; i++) {
					item = randomNum(0, this.range)
					while (item === this.anchor) {
						item = randomNum(0, this.range)
					}
					this.allQueue.push(item)
					item = 0
				}
				let oldLen = this.allQueue.length
				let setQueue = [...new Set(this.allQueue)]
				let newLen = setQueue.length
				while (oldLen !== newLen) {
					this.generateQueue()
				}
			},
			fcfsType() {
				this.visitQueue = []
				this.moveDistance = 0
				this.distanceQueue = []
				this.visitQueue = deepClone(this.allQueue)
				for (let i = 0; i < this.visitQueue.length; i++) {
					this.distanceQueue.push(Math.abs(this.visitQueue[i] - this.current))
					this.moveDistance += this.distanceQueue[i]
					this.current = this.visitQueue[i]
				}
			},
			sstfType() {
				this.visitQueue = []
				this.moveDistance = 0
				this.distanceQueue = []
				let leftQueue = []
				let rightQueue = []
				for (let i = 0; i < this.allQueue.length; i++) {
					if (this.allQueue[i] > this.current) {
						rightQueue.push(this.allQueue[i])
					} else {
						leftQueue.push(this.allQueue[i])
					}
				}
				rightQueue.sort()
				leftQueue.sort(compare)
				//找最近的先访问
				if (Math.abs(this.current - leftQueue[0]) > Math.abs(this.current - rightQueue[0])) {
					this.visitQueue.push(...rightQueue)
					this.visitQueue.push(...leftQueue)
				} else {
					this.visitQueue.push(...leftQueue)
					this.visitQueue.push(...rightQueue)
				}
				for (let i = 0; i < this.visitQueue.length; i++) {
					this.distanceQueue.push(Math.abs(this.visitQueue[i] - this.current))
					this.moveDistance += this.distanceQueue[i]
					this.current = this.visitQueue[i]
				}
			},
			scanType() {
				this.visitQueue = []
				this.moveDistance = 0
				this.distanceQueue = []
				let leftQueue = []
				let rightQueue = []
				for (let i = 0; i < this.allQueue.length; i++) {
					if (this.allQueue[i] > this.current) {
						rightQueue.push(this.allQueue[i])
					} else {
						leftQueue.push(this.allQueue[i])
					}
				}
				rightQueue.sort()
				leftQueue.sort(compare)
				//自里向外
				this.visitQueue.push(...rightQueue)
				this.visitQueue.push(...leftQueue)
				for (let i = 0; i < this.visitQueue.length; i++) {
					this.distanceQueue.push(Math.abs(this.visitQueue[i] -this.current)) 
					this.moveDistance += this.distanceQueue[i] 
					this.current = this.visitQueue[i]
				}
			},
			cscanType() {
				this.visitQueue = []
				this.moveDistance = 0
				this.distanceQueue = []
				let leftQueue = []
				let rightQueue = []
				for (let i = 0; i < this.allQueue.length; i++) {
					if (this.allQueue[i] > this.current) {
						rightQueue.push(this.allQueue[i])
					} else {
						leftQueue.push(this.allQueue[i])
					}
				}
				rightQueue.sort()
				//left也从小到大排序就行了 和scan相比
				leftQueue.sort()
				//自里向外
				this.visitQueue.push(...rightQueue)
				this.visitQueue.push(...leftQueue)
				for (let i = 0; i < this.visitQueue.length; i++) {
					this.distanceQueue.push(Math.abs(this.visitQueue[i] -this.current)) 
					this.moveDistance += this.distanceQueue[i] 
					this.current = this.visitQueue[i]
				}
			},
			nstepscanType() {

			},
			changeType() {
				switch (this.activeName) {
					case 'first':
						this.current = this.anchor
						this.fcfsType()
						break
					case 'second':
						this.current = this.anchor
						this.sstfType()
						break
					case 'thirst':
						this.current = this.anchor
						this.scanType()
						break
					case 'fourth':
						this.current = this.anchor
						this.cscanType()
						break
					case 'fifth':
						this.current = this.anchor
						this.nstepscanType()
						break
				}
			}
		},
	})
</script>

</html>
